{"mappings":"qhBASA,IAAAA,EAAAC,EAAA,SAgCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCEQ,SAASC,cAAc,SAE/BC,iBAAiB,UAExB,SAAkBC,GAChBA,EAAMC,iBACN,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cAAcC,SAEpD,GAAIJ,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,MAAQ,EACtD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOG,MAAOC,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACnB,MAAME,EAASC,OAAOT,EAAMK,OAASJ,EAAKI,MAAQC,EAElDrB,EAAcsB,EAAUC,GACrBE,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBwB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBwB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoB7B,QAAeC,MAAU,G,CAMvDW,EAAMK,cAAca,O","sources":["src/js/03-promises.js"],"sourcesContent":["// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку\n// в мілісекундах, крок збільшення затримки для кожного\n// промісу після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію\n// createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку,\n// враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\nimport Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  if (delay.value > 0 || step.value > 0 || amount.value > 0) {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","elements","value","i","position1","delays","Number","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.a6ad6469.js.map"}